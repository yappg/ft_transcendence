
services:
    # proxy:


#     frontend:
#         build:
#           context: ./Backend
#           dockerfile: Dockerfile
#         image: backend
#         container_name: backend
#         networks:
#           - transcendence
#         ports:
#           - 8000:8080
#         depends_on:
#           - backend
#         # environment:
#         #     REDIS_PASS: ${REDIS_PASS}
#         #     POSTGRES_DB: ${POSTGRES_DB}
#         #     POSTGRES_USER: ${POSTGRES_USER}
#         #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#         #     DEV: True
#         restart: always

    backend:
        build:
          context: ./Backend
          dockerfile: Dockerfile
        image: backend
        container_name: backend
        environment:
            REDIS_PASS: ${REDIS_PASS}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - ./Backend/source:/app:ro
        ports:
          - 8000:8080
        networks:
          - transcendence
        depends_on:
          - database
          - redis
        restart: always
# #         # healthcheck:
# #         #     test: ["executable", "arg"]
# #         #     interval: 1m30s
# #         #     timeout: 30s
# #         #     retries: 5
# #         #     start_period: 30s

# # #install broker for redis
    redis:
        image: redis
        container_name: redis
        environment:
            REDIS_PASS: ${REDIS_PASS}
        networks:
            - transcendence
        command: "redis-server --requirepass $REDIS_PASS"
        restart: always

    database:
        image: postgres
        container_name: database
        volumes:
            - database:/var/lib/postgresql/data
        networks:
            - transcendence
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        restart: always

#  of the docker container factory failed: failed to validate Docker info: failed to detect Docker info: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
# 9] Registration of the containerd container factory failed: unable to create containerd client: containerd: cannot unix dial containerd api service: dial unix /run/containerd/containerd.sock: connect: no such file or directory
    cadvisor:
      image: gcr.io/cadvisor/cadvisor:latest
      container_name: cadvisor
      # privileged: true
      networks:
        - transcendence
      ports:
        - "8080:8080"
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:ro
        - /sys:/sys:ro
        # - /Users/ebennix/goinfre/docker/.docker:/var/lib/docker:ro
        - /dev/disk/:/dev/disk:ro
        - /dev/kmsg:/dev/kmsg:ro  # Add this device
      restart: unless-stopped

    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        volumes:
          - "./monitor/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
          - prom:/prometheus
        command:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
        networks:
          - transcendence
        ports:
          - "9090:9090"
        restart: always

    grafana:
        image: grafana/grafana
        container_name: grafana
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=mehdi1234
        networks:
          - transcendence
        ports:
          - "3000:3000"
        restart: unless-stopped

  # alertmanager:
  #   image: prom/alertmanager
  #   container_name: alertmanager
  #   networks:
  #     - monitoring
  #   volumes:
  #     - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
  #   environment:
  #     - SMTP_USERNAME=${SMTP_USERNAME}  # Store sensitive data in environment variables
  #     - SMTP_PASSWORD=${SMTP_PASSWORD}


      # - GF_SERVER_ROOT_URL=http://my.grafana.server/
      # - Setting	Default value
      # - GF_PATHS_CONFIG	/etc/grafana/grafana.ini
      # - GF_PATHS_DATA	/var/lib/grafana
      # - GF_PATHS_HOME	/usr/share/grafana
      # - GF_PATHS_LOGS	/var/log/grafana
      # - GF_PATHS_PLUGINS	/var/lib/grafana/plugins
      # - GF_PATHS_PROVISIONING	/etc/grafana/provisioning
      # - GF_INSTALL_PLUGINS=grafana-clock-panel

# nginx-exporter:
#   image: nginx/nginx-prometheus-exporter:latest
#   command:
#     - '-nginx.scrape-uri=http://nginx:8080/stub_status'
#   ports:
#     - 9113:9113


volumes:
    graf:
        name: graf
    prom:
        name: prom
    database:
        name: database

networks:
    transcendence:
        name: transcendence
    infra:
        name: infra
