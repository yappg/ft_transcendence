version: '3.8'

services:

    docker_exporter:
      container_name: docker-exporter
      image: prometheusnet/docker_exporter
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
      networks:
        - transcendence
      restart: unless-stopped

    # web:
    #   image: nginx
    #   container_name: nginx
    #   volumes:
    #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
    #   command: [nginx-debug, '-g', 'daemon off;']
    #   networks:
    #     - transcendence
    #   ports:
    #     - 443:443
    #   depends_on:
    #     frontend:
    #         condition: service_healthy
    #     backend:
    #         condition: service_healthy
    #   restart: unless-stopped

    # nginx-exporter:
    #   image: nginx/nginx-prometheus-exporter:latest
    #   command:
    #     - '-nginx.scrape-uri=http://nginx:8080/stub_status'
    #   ports:
    #     - 9113:9113


# npm install prom-client

# import { collectDefaultMetrics, register } from 'prom-client';

# collectDefaultMetrics();

# export default async function handler(req, res) {
#   res.setHeader('Content-Type', register.contentType);
#   res.end(await register.metrics());
# }


#     frontend:
#         container_name: frontend
#         build:
#           context: ./frontend
#           dockerfile: Dockerfile
#         image: frontend
# # DEV =====>
#         volumes:
#           - ./Frontend/source:/app/source:rw
#           - /app/source/.next
#           - /app/source/node_modules
# # =========>
#         environment:
#           BACKEND_URL: http://backend:8080
#         networks:
#           - transcendence
#         ports:
#           - 3000:3000
#         # depends_on:
#         #     backend:
#         #         condition: service_healthy
#         # healthcheck:
#         #     test: ["CMD", ""]
#         #     interval: 1m30s
#         #     timeout: 30s
#         #     retries: 5
#         #     start_period: 30s
#         restart: always


# pip install django-prometheus
# INSTALLED_APPS = [
#     ...
#     'django_prometheus',
#     ...
# ]

# MIDDLEWARE = [
#     'django_prometheus.middleware.PrometheusBeforeMiddleware',
#     ...
#     'django_prometheus.middleware.PrometheusAfterMiddleware',
# ]
# from django.urls import path, include

# urlpatterns = [
#     ...
#     path('', include('django_prometheus.urls')),
#     ...
# ]




#     backend:
#         container_name: backend
#         build:
#           context: ./Backend
#           dockerfile: Dockerfile
#         image: backend
# # DEV =====>
#         volumes:
#             - ./Backend/source:/app/source:rw
# # =========>
#         environment:
#             DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
#             JWT_SECRET_KEY: ${JWT_SECRET_KEY}
#             42_CLIENT_ID: $${42_CLIENT_ID}
#             42_CLIENT_SECRET: $${42_CLIENT_SECRET}
#             GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
#             GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
#             POSTGRES_DB: ${POSTGRES_DB}
#             POSTGRES_USER: ${POSTGRES_USER}
#             POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#             REDIS_PASS: ${REDIS_PASS}
#         networks:
#           - transcendence
#         ports:
#           - 8080:8080
#         depends_on:
#           cache:
#             condition: service_healthy
#           database:
#             condition: service_healthy
#         # healthcheck:
#         #     test: ["CMD", ""]
#         #     interval: 1m30s
#         #     timeout: 30s
#         #     retries: 5
#         #     start_period: 30s
#         restart: always

    cache:
        container_name: redis
        image: redis:alpine
        volumes:
            - redis-data:/data
        environment:
            REDIS_PASS: ${REDIS_PASS}
        command: "redis-server --requirepass $REDIS_PASS"
        networks:
            - transcendence
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "${REDIS_PASS}", "ping"]
            interval: 30s
            timeout: 5s
            retries: 3
            # start_period: 10s
        restart: always

    cache_exporter:
        container_name: redis-exporter
        image: oliver006/redis_exporter
        environment:
            REDIS_URL: redis://:${REDIS_PASS}@cache:6379
        networks:
            - transcendence
        depends_on:
            cache :
                condition: service_healthy
        restart: unless-stopped

    database:
        container_name: postgres
        image: postgres:alpine3.20
        volumes:
            - postgres-data:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        networks:
            - transcendence
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
            interval: 30s # every interval runs
            timeout: 5s # runs  5 time before failing the command
            retries: 3  # 3 times before failing the container
            # start_period: 10s # Uncommented to allow time for the database to start before health checks begin
        restart: always

    database-exporter:
        container_name: postgres-exporter
        image: wrouesnel/postgres_exporter
        environment:
            DATA_SOURCE_URI: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}?sslmode=disable"
        networks:
            - transcendence
        depends_on:
            database :
                condition: service_healthy
        restart: unless-stopped

    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        volumes:
          - "./Services/prom/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
          - prometheus-data:/prometheus
        command:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
        networks:
          - transcendence
        ports:
          - "9090:9090"
        restart: always

    grafana:
        image: grafana/grafana
        container_name: grafana
        environment:
            GF_SECURITY_ADMIN_USER : ${GRAFANA_USER}
            GF_SECURITY_ADMIN_PASSWORD : ${GRAFANA_PASSWORD}
            GF_DATASOURCES_PATH : /etc/grafana/provisioning/datasources
            GF_PROVISIONING_PATHS : /etc/grafana/provisioning
        volumes:
            - grafana-data:/var/lib/grafana:rw
            - ./Config/provisioning:/etc/grafana/provisioning:rw
        networks:
          - transcendence
        ports:
          - "3000:3000"
        restart: unless-stopped

    # - GF_SERVER_ROOT_URL=http://my.grafana.server/
    # - Setting	Default value
    # - GF_PATHS_CONFIG	/etc/grafana/grafana.ini
    # - GF_PATHS_DATA	/var/lib/grafana
    # - GF_PATHS_HOME	/usr/share/grafana
    # - GF_PATHS_LOGS	/var/log/grafana
    # - GF_PATHS_PLUGINS	/var/lib/grafana/plugins
    # - GF_PATHS_PROVISIONING	/etc/grafana/provisioning
    # - GF_INSTALL_PLUGINS=grafana-clock-panel

    # alertmanager:
    #   image: prom/alertmanager
    #   container_name: alertmanager
    #   networks:
    #     - monitoring
    #   volumes:
    #     - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    #   environment:
    #     - SMTP_USERNAME=${SMTP_USERNAME}  # Store sensitive data in environment variables
    #     - SMTP_PASSWORD=${SMTP_PASSWORD}

#//TODO add health checkes for front and back

volumes:
    redis-data:
        name: cache

    postgres-data:
        name: database
        # driver: local
        # driver_opts:
        #     o: bind
        #     type: none
        #     device: ${PWD}/volumes/postgres

    prometheus-data:
        name: prometheus
        # driver: local
        # driver_opts:
        #     o: bind
        #     type: none
        #     device: ${PWD}/volumes/prometheus

    # grafana-data:
    #     name: grafana
    #     driver: local
    #     driver_opts:
    #         o: bind
    #         type: none
    #         device: ${PWD}/volumes



networks:
    transcendence:
        name: transcendence
    # infra:
    #     name: infra
