services:

    container-exporter:
        container_name: cadvisor
        image: google/cadvisor
        volumes:
            - "/:/rootfs:ro"
            - "/var/run:/var/run:ro"
            - "/sys:/sys:ro"
            - "/var/lib/docker/:/var/lib/docker:ro"
            - "/dev/disk/:/dev/disk:ro"
        networks:
            - transcendence
        restart: unless-stopped

    web:
        container_name: nginx
        image: nginx:alpine
        volumes:
        #   - SSL\SSL:ro
          - ./Services/nginx/nginx.conf:/etc/nginx/conf.d/endpoints.conf:ro
        command: ["nginx-debug", "-g", "daemon off;"]
        networks:
          - transcendence
        ports:
          - 443:443
        # depends_on:
        #   frontend:
        #       condition: service_healthy
        #   backend:
        #       condition: service_healthy
        # healthcheck:
        #     test: ["CMD", "curl", "-f", "http://localhost/stub_status"]
        #     interval: 1m30s
        #     timeout: 30s
        #     retries: 5
        #     start_period: 30s
        restart: always

    web-exporter:
        container_name: nginx-exporter
        image: nginx/nginx-prometheus-exporter
        command: --nginx.scrape-uri=http://web:8080/stub_status
        networks:
            - transcendence
        # depends_on:
            # web :
                # condition: service_healthy
        restart: unless-stopped


#     frontend:
#         container_name: frontend
#         build:
#           context: ./frontend
#           dockerfile: Dockerfile
#         image: frontend
# # DEV =====>
#         volumes:
#           - ./Frontend/source:/app/source:rw
#           - /app/source/.next
#           - /app/source/node_modules
# # =========>
#         environment:
#           BACKEND_URL: http://backend:8080
#         networks:
#           - transcendence
#         ports:
#           - 3000:3000
#         # depends_on:
#         #     backend:
#         #         condition: service_healthy
#         # healthcheck:
#         #     test: ["CMD", ""]
#         #     interval: 1m30s
#         #     timeout: 30s
#         #     retries: 5
#         #     start_period: 30s
#         restart: always

    backend:
        container_name: backend
        build:
          context: ./Backend
          dockerfile: Dockerfile
        image: backend
# DEV =====>
        volumes:
            - ./Backend/source:/app/source:rw
# =========>
        environment:
            DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
            JWT_SECRET_KEY: ${JWT_SECRET_KEY}
            42_CLIENT_ID: $${42_CLIENT_ID}
            42_CLIENT_SECRET: $${42_CLIENT_SECRET}
            GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
            GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            REDIS_PASS: ${REDIS_PASS}
        networks:
          - transcendence
        ports:
          - 8080:8080
        depends_on:
          cache:
            condition: service_healthy
          database:
            condition: service_healthy
        # healthcheck:
        #     test: ["CMD", ""]
        #     interval: 1m30s
        #     timeout: 30s
        #     retries: 5
        #     start_period: 30s
        restart: always


    cache:
        container_name: redis
        image: redis:alpine
        volumes:
            - redis-data:/data
        environment:
            REDIS_PASS: ${REDIS_PASS}
        command: "redis-server --requirepass $REDIS_PASS"
        networks:
            - transcendence
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "${REDIS_PASS}", "ping"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 10s
        restart: always

    cache-exporter:
        container_name: redis-exporter
        image: bitnami/redis-exporter
        environment:
            REDIS_PASSWORD: ${REDIS_PASS}
            REDIS_ADDR: "redis://cache:6379"
        networks:
            - transcendence
        depends_on:
            cache :
                condition: service_healthy
        restart: unless-stopped


    database:
        container_name: postgres
        image: postgres:alpine
        volumes:
            - postgres-data:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        networks:
            - transcendence
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 10s
        restart: always

    database-exporter:
        container_name: postgres-exporter
        image: wrouesnel/postgres_exporter
        environment:
            DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}?sslmode=disable"
        networks:
            - transcendence
        depends_on:
            database :
                condition: service_healthy
        restart: unless-stopped


    prometheus:
        container_name: prometheus
        image: prom/prometheus:latest
        volumes:
            - prometheus-data:/prometheus
            - "./Services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
            - "./Services/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro"
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
        networks:
            - transcendence
        ports:
            - "9090:9090"
        restart: always

    # alert-manager:
    #     container_name: alert-manager
    #     image: prom/alertmanager
    #     volumes:
    #         - alert-manager-data:/alertmanager
    #         - "./Services/alert-manager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro"
    #     environment:
    #         DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
    #     command:
    #         - '--config.file=/etc/alertmanager/alertmanager.yml'
    #     networks:
    #         - transcendence
    #     restart: always


    grafana:
        container_name: grafana
        image: grafana/grafana
        environment:
            - GF_SECURITY_ADMIN_USER=admino
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
        volumes:
            # - grafana-data:/var/lib/grafana
            - ./Services/grafana/provisioning:/etc/grafana/provisioning
            - ./Services/grafana/dashboards:/var/lib/grafana/dashboards
        networks:
            - transcendence
        ports:
            - "3000:3000"
        depends_on:
            - prometheus
        restart: unless-stopped


#//TODO add health checkes for front and back

volumes:

    redis-data:
        name: cache
        # driver: local
        # driver_opts:
        #     o: bind
        #     type: none
        #     device: ${PWD}/volumes/postgres

    postgres-data:
        name: database
        # driver: local
        # driver_opts:
        #     o: bind
        #     type: none
        #     device: ${PWD}/volumes/postgres

    prometheus-data:
        name: prometheus
        # driver: local
        # driver_opts:
        #     o: bind
        #     type: none
        #     device: ${PWD}/volumes/prometheus

    alert-manager-data:
        name: alert-manager
        # driver: local
        # driver_opts:
        #     o: bind
        #     type: none
        #     device: ${PWD}/volumes/prometheus

    # grafana-data:
    #     name: grafana
    #     driver: local
    #     driver_opts:
    #         o: bind
    #         type: none
    #         device: ${PWD}/volumes



networks:
    transcendence:
        name: transcendence
    # infra:
    #     name: infra
