
services:
    container-exporter:
      container_name: cadvisor
      image: gcr.io/cadvisor/cadvisor
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:ro
        - /sys:/sys:ro
        - /dev/disk/:/dev/disk:ro
      networks:
        - transcendence
      restart: unless-stopped

    web:
      container_name: nginx
      build:
        context: ./src/Services/nginx
        dockerfile: Dockerfile
      image: nginx
      volumes:
        - media-files:/app/UsersMedia
        - static-files:/app/staticfiles
      networks:
        - transcendence
      ports:
        - 0.0.0.0:80:80
        - 0.0.0.0:443:443
      depends_on:
        frontend:
          condition: service_started
        backend:
          condition: service_healthy
        grafana:
          condition: service_healthy
      restart: always

    web-exporter:
      container_name: nginx-exporter
      image: nginx/nginx-prometheus-exporter
      command: --nginx.scrape-uri=http://web:8080/stub_status
      networks:
        - transcendence
      depends_on:
        web:
          condition: service_started
      restart: unless-stopped

    frontend:
      container_name: frontend
      build:
        context: ./src/Frontend
        target: ${ENV:-production}
        dockerfile: Dockerfile
      image: frontend

# DEV ==============>
      volumes:
        - ./src/Frontend/source:/app:rw
      ports:
        - 3000:3000
# ==================>
      networks:
        - transcendence
      restart: always

    backend:
      container_name: backend
      build:
        context: ./src/Backend
        target: ${ENV:-production}
        dockerfile: Dockerfile
      image: backend
      environment:
        SIGNING_KEY: ${SIGNING_KEY}
        ALLOWED_HOSTS: ${ALLOWED_HOSTS}
        CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
        CLIENT_ID_42: ${CLIENT_ID_42}
        CLIENT_SECRET_42: ${CLIENT_SECRET_42}
        OAUTH_42_CALLBACK_URL: ${OAUTH_42_CALLBACK_URL}
        GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
        GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
        OAUTH_GOOGLE_CALLBACK_URL: ${OAUTH_GOOGLE_CALLBACK_URL}
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        REDIS_PASS: ${REDIS_PASS}
      volumes:
        - media-files:/app/source/UsersMedia
        - static-files:/app/source/staticfiles
# DEV ==============>
        - ./src/Backend/config:/app/config:rw
        - ./src/Backend/source:/app/source:rw
      ports:
        - 8080:8080
# ==================>
      networks:
        - transcendence
      depends_on:
        cache:
          condition: service_healthy
        database:
          condition: service_healthy
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/health/"]
        interval: 5s
        timeout: 3s
        retries: 10
        start_period: 15s
      restart: always

    cache:
      container_name: redis
      build:
        context: ./src/Services/redis
        dockerfile: Dockerfile
      image: redis
      environment:
        REDIS_PASS: ${REDIS_PASS}
      volumes:
        - redis-data:/data
      networks:
        - transcendence
      healthcheck:
        test: ["CMD", "redis-cli", "-a", "${REDIS_PASS}", "ping"]
        interval: 5s
        timeout: 3s
        retries: 10
        start_period: 10s
      restart: always

    cache-exporter:
      container_name: redis-exporter
      image: bitnami/redis-exporter
      environment:
        REDIS_PASSWORD: ${REDIS_PASS}
        REDIS_ADDR: "redis://cache:6379"
      networks:
        - transcendence
      depends_on:
        cache:
          condition: service_healthy
      restart: unless-stopped

    database:
      container_name: postgres
      image: postgres:alpine
      environment:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      volumes:
        - postgres-data:/var/lib/postgresql/data
      networks:
        - transcendence
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
        interval: 5s
        timeout: 3s
        retries: 10
        start_period: 10s
      restart: always

    database-exporter:
      container_name: postgres-exporter
      image: wrouesnel/postgres_exporter
      environment:
        DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}?sslmode=disable"
      networks:
        - transcendence
      depends_on:
        database:
          condition: service_healthy
      restart: unless-stopped


    prometheus:
      container_name: prometheus
      build:
        context: ./src/Services/prometheus
        dockerfile: Dockerfile
      image: prometheus
      volumes:
        - prometheus-data:/prometheus
      networks:
        - transcendence
      restart: always

    alert-manager:
      container_name: alert-manager
      build:
        context: ./src/Services/alert-manager
        dockerfile: Dockerfile
      image: alert-manager
      volumes:
        - alert-manager-data:/alertmanager
      networks:
        - transcendence
      depends_on:
        - prometheus
      restart: always

    disord-alerts:
      container_name: discord-alerts
      image: benjojo/alertmanager-discord
      environment:
        DISCORD_WEBHOOK: ${DISCORD_WEBHOOK_URL}
      networks:
        - transcendence
      depends_on:
        - alert-manager
      restart: always


    grafana:
      container_name: grafana
      build:
        context: ./src/Services/grafana
        dockerfile: Dockerfile
      image: grafana
      environment:
        GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
        GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      volumes:
        - grafana-data:/var/lib/grafana
      networks:
        - transcendence
      depends_on:
        prometheus:
          condition: service_started
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3000"]
        interval: 5s
        timeout: 3s
        retries: 10
        start_period: 10s
      restart: unless-stopped

volumes:
  prometheus-data:
    name: prometheus
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: ${PWD}/data/prometheus

  alert-manager-data:
    name: alert-manager

  grafana-data:
    name: grafana

  static-files:
    name: static

  media-files:
    name: media
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/src/Backend/source/UsersMedia

  postgres-data:
    name: postgres
    # driver: local
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: ${PWD}/data/postgres

  redis-data:
    name: redis


networks:
  transcendence:
    name: transcendence
